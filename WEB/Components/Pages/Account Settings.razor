@page "/account_settings"
@using Front_End.Components.Pages.Users
@using Front_End.Components.Pages.Misc
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@using BuisnessUsers
@inject IJSRuntime js
@using System.Security.Cryptography;
@using System.Text;
@inject NavigationManager nav



<CascadingAuthenticationState>
	<AuthorizeView>
		<Authorized>
			<div class="flex h-screen flex-col gap-3 overflow-x-hidden bg-black">
				<NavBar />

				<div class="flex h-screen flex-col items-center justify-center gap-2 text-white">
				
					<h1 class="m-5 text-4xl font-bold">Account Settings </h1>
					<UserInfo UserID="@User.UserID" />

					<form class="mt-3 flex flex-col gap-3" @onsubmit="ChangePassword">
						<input @bind="Password" placeholder="Current Password" class="border-2 rounded-3xl border-white bg-black p-1 px-3 text-white" required type="Password" />
						<input @bind="NewPassword" placeholder="New Password" class="border-2 rounded-3xl border-white bg-black p-1 px-3 text-white" required type="Password" />
						<input @bind="ConfirmPassword" placeholder="Confirm Password" class="border-2 rounded-3xl border-white bg-black p-1 px-3 text-white" required type="Password" />
						<div class="mb-4 flex justify-center">
							<button class="rounded-3xl bg-blue-500 p-2 px-3 text-xs text-white" type="submit">Change</button>
						</div>
					</form>
				</div>

			</div>
		</Authorized>
		<NotAuthorized>
			
			<NotAuthorizedPage PageName="Account Settings" />
		</NotAuthorized>
	</AuthorizeView>

</CascadingAuthenticationState>


@code
{

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }
	private AuthenticationState auth { get; set; }
	string? Password = null;
	string? NewPassword = null;
	string? ConfirmPassword = null;

	clsUsers User;

	public string ComputeHash(string input)
	{
		using (SHA256 sha256 = SHA256.Create())
		{
			byte[] HashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(input));
			return BitConverter.ToString(HashBytes).Replace("-", "").ToLower();
		}
	}

	public async Task ChangePassword()
	{
		if (ComputeHash(Password) != User.Password)
		{
			await js.InvokeVoidAsync("alert", "Incorrect Password!");
			return;
		}

		if (ConfirmPassword != NewPassword)
		{
			await js.InvokeVoidAsync("alert", "New Password and Confirm Password must be the same!");
			return;
		}

		User.Password = ComputeHash(ConfirmPassword);

		if (User.Save())
		{
			await js.InvokeVoidAsync("alert", "Password changed successfully!");
			nav.NavigateTo("/Login");
		}
		else
			await js.InvokeVoidAsync("alert", "Error while trying to change Password!");


	}

	protected override async Task OnInitializedAsync()
	{
		auth = await authenticationStateTask;
		User = clsUsers.Find(auth.User.Identity.Name);
	}

}
