@using Front
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager navigationManager
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider


@rendermode InteractiveServer

<div class="border-b-2 flex w-screen flex-row items-center justify-between gap-3 border-gray-900 bg-black">

    <div class="hidden md:block">

        <div class="my-3 ml-6 flex flex-row gap-4 bg-black text-xs text-white">

            <button class="hover:underline" @onclick="GoToApplicationsPage">Applications</button>
            <button class="hover:underline" @onclick="GoToPeoplePage">People</button>
            <button class="hover:underline" @onclick="GoToDriversPage">Drivers</button>
            <button class="hover:underline" @onclick="GoToUsersPage">Users</button>
            <button class="hover:underline" @onclick="GoToAccountSettingsPage">Account Settings</button>
        </div>
    </div>

    <div class="block md:hidden">
        <button class="m-3 mx-4" @onclick="ToggleDropdown">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="-rotate-@RotationAngle h-6 w-6 transform cursor-pointer text-white transition-transform duration-300">
                <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 5.25 7.5 7.5 7.5-7.5m-15 6 7.5 7.5 7.5-7.5" />
            </svg>


        </button>

        <div class="z-10 absolute mx-4 mt-1 w-48 rounded-md bg-neutral-900 text-white shadow-lg" @onclick:preventDefault="true" @onclick:stopPropagation="true" style="display: @(IsDropdownOpen ? "block" : "none")">
            <a class="block px-4 py-2 text-sm hover:bg-blue-500 hover:text-white" @onclick="GoToApplicationsPage">Applications</a>
            <a class="block px-4 py-2 text-sm hover:bg-blue-500 hover:text-white" @onclick="GoToPeoplePage">People</a>
            <a class="block px-4 py-2 text-sm hover:bg-blue-500 hover:text-white" @onclick="GoToDriversPage">Drivers</a>
            <a class="block px-4 py-2 text-sm hover:bg-blue-500 hover:text-white" @onclick="GoToUsersPage">Users</a>
            <a class="block px-4 py-2 text-sm hover:bg-blue-500 hover:text-white" @onclick="GoToAccountSettingsPage">Account Settings</a>

        </div>

    </div>

    <div class="my-3 mr-10 flex flex-row gap-3">

        <div class="flex flex-row gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6 text-white">
                <path stroke-linecap="round" stroke-linejoin="round" d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
            </svg>
            <h1 class="mt-1 text-xs font-bold text-white">
                @authenticationState.User.Identity.Name
            </h1>

        </div>
        <button class="bg-black text-xs text-white hover:underline" @onclick="Logout">Log Out</button>

    </div>



</div>








@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private AuthenticationState authenticationState => authenticationStateTask?.Result;


    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationStatus(null);
        navigationManager.NavigateTo("/login");
    }

    private void GoToApplicationsPage()
    {
        navigationManager.NavigateTo("/applications");
    }

    private void GoToPeoplePage()
    {
        navigationManager.NavigateTo("/people");
    }

    private void GoToDriversPage()
    {
        navigationManager.NavigateTo("/drivers");
    }

    private void GoToUsersPage()
    {
        navigationManager.NavigateTo("/users");
    }

    private void GoToAccountSettingsPage()
    {
        navigationManager.NavigateTo("/account_settings");
    }


    bool IsDropdownOpen { get; set; }
    string RotationAngle => IsDropdownOpen ? "90" : "0";

    void ToggleDropdown()
    {
        IsDropdownOpen = !IsDropdownOpen;
    }




}