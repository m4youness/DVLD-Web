@page "/users"
@using Front_End.Components.Pages.Misc
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nav
@inject IJSRuntime js
@rendermode InteractiveServer
@using BuisnessUsers
@using System.Data


<CascadingAuthenticationState>
	<AuthorizeView>
        <Authorized>
            <div class="flex h-screen flex-col gap-2 overflow-x-hidden bg-black">
                <NavBar />
                <div class="mt-3 flex justify-center">
                    <div class="relative mb-5 overflow-x-auto shadow-md sm:rounded-lg">
                    <h1 class="m-5 text-center text-3xl font-bold text-white">Users Table</h1>
                        <div class="m-2 flex justify-between text-white">
                            <button class="rounded-3xl bg-sky-600 p-2 px-3 text-xs text-white" @onclick="AddUser">Add</button>
                            <form @onsubmit="DeleteUser">

                                <div class="flex gap-2">
                                    <button class="rounded-3xl bg-red-600 p-2 px-3 text-xs text-white" type="submit">Delete</button>
                                    <input class="border-2 rounded-3xl border-white bg-black p-1 px-3 text-white"@bind="UserToBeDeleted" placeholder="User ID" required />   

                                </div>
                            </form>
                        </div>
                        <table class="w-full text-left text-sm text-gray-500 rtl:text-right dark:text-gray-400">
                            <thead class="bg-gray-50 text-xs uppercase text-gray-700 dark:bg-zinc-800 dark:text-gray-400">
                                <tr>
                                    @foreach (DataColumn col in dv.Table.Columns)
                                    {
                                        <th scope="col" class="px-6 py-3">
                                        @col.ColumnName
                                        </th>
                                    }

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (DataRowView rowView in dv)
                                {
                                        <tr class="border-b odd:bg-white even:bg-gray-50 dark:border-gray-700 odd:dark:bg-stone-950 even:dark:bg-neutral-900">

                                        @foreach (DataColumn col in dv.Table.Columns)
                                        {
                                                <td class="px-6 py-4">
                                                    <buttton class="hover:underline" @onclick="@(e => UpdateUser((int)rowView.Row["UserID"]))">
                                                        @rowView.Row[col]
                                                    </buttton>
                                                </td>

                                        }
                                        </tr>
                                }


                            </tbody>
                        </table>
                        </div>
                    </div>

                </div>

        </Authorized>
		<NotAuthorized>
			<NotAuthorizedPage PageName="Users" />
		</NotAuthorized>
	</AuthorizeView>

</CascadingAuthenticationState>

@code
{
    DataView dv = clsUsers.GetUsers();
    public int? UserToBeDeleted { get; set; } = null;
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private AuthenticationState auth { get; set; }

    clsUsers CurrentUser;

    protected override async void OnInitialized()
    {
        auth = await AuthenticationStateTask;
        CurrentUser = clsUsers.Find(auth.User.Identity.Name);
    }

    public async Task DeleteUser()
    {
        var User = clsUsers.FindByUserID(UserToBeDeleted);
        if (User == null)
        {
            await js.InvokeVoidAsync("alert", "This User Doesn't Exist!");
            return;
        }
        if (User.UserName == CurrentUser.UserName)
        {
            await js.InvokeVoidAsync("alert", "Can't Delete the User you are signed in with!");
            return;
        }
        if (!UserToBeDeleted.HasValue)
        {
            await js.InvokeVoidAsync("alert", "Must Enter A Value for User ID");
            return; 
        }

        if (clsUsers.DeleteUser(UserToBeDeleted))
            await js.InvokeVoidAsync("alert", "User Deleted Successfully!");
        else
            await js.InvokeVoidAsync("alert", "This User Cannot be deleted because it has data tied to it!");
    }

    public void AddUser()
    {
        nav.NavigateTo("/addUser");
    }

    public void UpdateUser(int userID)
    {
        nav.NavigateTo($"/updateUser?id={userID}");
    }
}
