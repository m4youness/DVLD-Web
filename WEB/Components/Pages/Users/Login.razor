@using System.Security.Cryptography;
@using System.Text;
@using Front
@using Microsoft.AspNetCore.Components.Authorization
@using BuisnessUsers;
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication


@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime js
@inject NavigationManager navigationManager

@rendermode InteractiveServer
@page "/login"


<div class="flex h-screen items-center justify-center bg-black">
    <form class="flex flex-col gap-3 p-10 py-44" @onsubmit="LoginToHome">
        <h1 class="text-3xl font-bold text-white">Login Page</h1>
        <div class="flex flex-row gap-2">
            <input type="text" class="border-2 rounded-3xl border-white bg-black p-1 px-3 text-white" required placeholder="username" @bind="UserName" />
        </div>
        <div class="flex flex-row gap-2">
            <input type="password" class="border-2 rounded-3xl border-white bg-black p-1 px-3 text-white" required placeholder="password" @bind="Password" />
        </div>
        <button class="rounded-3xl bg-blue-900 p-2 px-3 text-xs text-white" type="submit">Login</button>
    </form>
</div>

@code
{

    private string UserName = null;
    private string Password = null;

    private string ComputeHash(string input)
    {
        using (SHA256 sha256 = SHA256.Create())
        {
            byte[] HashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(input));
            return BitConverter.ToString(HashBytes).Replace("-", "").ToLower();
        }
    }


    private async Task LoginToHome()
    {
        var currentUser = clsUsers.Find(UserName);

        if (currentUser == null || currentUser.Password != ComputeHash(Password))
        {
            await js.InvokeVoidAsync("alert", "Wrong Username or Password!");
            return;
        }

        if (!clsUsers.IsActive(UserName))
        {
            await js.InvokeVoidAsync("alert", "This User is not Active!");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationStatus(new UserSession
            {
                UserName = currentUser.UserName,
                Role = "User"
            });
        navigationManager.NavigateTo("/");
    }


}




