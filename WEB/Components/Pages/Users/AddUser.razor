@page "/addUser"
@using Microsoft.AspNetCore.Components.Authorization
@using Front_End.Components.Pages.Misc
@rendermode InteractiveServer
@using BuisnessUsers
@inject IJSRuntime js
@using System.Text
@using System.Security.Cryptography
@using BuisnessLayer
<CascadingAuthenticationState>
	<AuthorizeView>
		<Authorized>
        <div class="h-screen overflow-x-hidden bg-black">
            <NavBar />
            <form @onsubmit="AddNewUser" class="mt-5 flex h-3/4 flex-col items-center justify-center gap-4 text-white">
                <h1 class="text-center text-3xl font-bold">Add User</h1>
              
                    
                        <input placeholder="PersonID"  @bind="New_User.PersonID" class="border-2 rounded-3xl border-white bg-black p-1 px-4 text-white" required/>
                        <input placeholder="Username" @bind="New_User.UserName" class="border-2 rounded-3xl border-white bg-black p-1 px-4 text-white" required/>
                        <input placeholder="Password" @bind="Password" class="border-2 rounded-3xl border-white bg-black p-1 px-4 text-white" type="Password" required/>
                       

                        <div class="flex gap-2">

                        <input type="checkbox" id="myCheckbox" name="myCheckbox" @onclick="Check" checked>
                        <label for="myCheckbox" >Is Active</label>
                        </div>

                   

                   
                    <div class="flex justify-center gap-3 transition delay-150 duration-300 ease-in-out">
                        <button class="rounded-3xl bg-blue-600 p-2 px-4 text-white" type="submit">Add User</button>

                    </div>


         
            </form>
       </div>
       <div class="h-8 bg-black sm:h-0">

       </div>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedPage PageName="Add Users"/>
    </NotAuthorized>
	</AuthorizeView>
 </CascadingAuthenticationState>

@code {
    clsUsers New_User = new clsUsers();

    public bool isChecked { get; set; } = true;

    public string Password{ get; set; }


    public string ComputeHash(string input)
    {
        using (SHA256 sha256 = SHA256.Create())
        {
            byte[] HashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(input));
            return BitConverter.ToString(HashBytes).Replace("-", "").ToLower();
        }
    }

    public void Check()
    {
        isChecked = !isChecked;
    }

    public async Task AddNewUser()
    {
        var Person = clsPeople.Find(New_User.PersonID);
        var user = clsUsers.Find(New_User.PersonID);
        if (Person == null)
        {
            await js.InvokeVoidAsync("alert", "This Person Does not exist!");
            return;
        }

        if (user != null)
        {
            await js.InvokeVoidAsync("alert", "This Person is already a User!");
            return;
        }

        

        New_User.isActive = isChecked;
        New_User.Password = ComputeHash(Password);

        if (New_User.Save())
            await js.InvokeVoidAsync("alert", "New User was Successfully Added!");
        else
            await js.InvokeVoidAsync("alert", "Error occurred while Adding User!");


    }

}
